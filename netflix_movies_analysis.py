# -*- coding: utf-8 -*-
"""netflix-movies-analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YCMYr16M7wMoxoXlhGvt_oV8RdPzFB0p
"""

# importing lib.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Commented out IPython magic to ensure Python compatibility.
# Authenticate with GitHub
from google.colab import auth
auth.authenticate_user()

# Set up Git (replace with your details)
!git config --global user.name "Prateek Kumar Yadav"
!git config --global user.email "prateekkumary73@gmail.com"

# Clone the repository (if you haven't already)
!git clone https://github.com/prateekkumary/netflix-movies-analysis.git

# Change directory to the repository
# %cd netflix-movies-analysis

# Add your changes (this assumes you modified analyze_netflix_movies.ipynb)
!git add /content/analyze_netflix_movies.ipynb

# Commit the changes with a message
!git commit -m "Import necessary libraries: numpy, pandas, matplotlib, and seaborn for analysis and visualization in analyze_netflix_movies.ipynb."

# Push the changes to GitHub
!git push https://github.com/prateekkumary/netflix-movies-analysis.git

df = pd.read_csv('mymoviedb.csv', lineterminator=
'\n')
df.head()

# viewing dataset info
df.info()

"""â€¢ looks like our dataset has no NaNs! â€¢ Overview, Original_Language and Poster-Url
wouldn't be so useful during analysis â€¢ Release_Date column needs to be casted into
date time and to extract only the year value
"""

# exploring genres column
df['Genre'].head()

"""genres are saperated by commas followed by whitespaces."""

# check for duplicated rows
df.duplicated().sum()

"""our dataset has no duplicated rows either."""

# exploring summary statistics
df.describe()

"""ðŸ“Š Exploratory Summary

ðŸ”¹ Popularity
Mean: 40.33 â€” indicates the average popularity score.

Median (50%): 21.20 â€” most movies are moderately popular.

Standard Deviation: 108.87 â€” very high variability, suggesting some extremely popular movies are skewing the data.

Minâ€“Max: 13.35 to 5083.95 â€” wide range, with a few outliers having very high popularity.

Observation: Popularity is highly right-skewed due to some blockbuster titles.

ðŸ”¹ Vote Count

Mean: 1392.81 â€” average number of votes per movie.

Median: 444 â€” half of the movies have fewer than 444 votes.

Standard Deviation: 2611.21 â€” very high spread.

Minâ€“Max: 0 to 31,077 â€” some movies have no votes, while others are extremely popular.

Observation: Like popularity, vote count is heavily skewed with a few movies dominating the count.

ðŸ”¹ Vote Average

Mean: 6.44 â€” average user rating is fairly high.

Median: 6.5 â€” the typical movie scores between 6 and 7.

Standard Deviation: 1.13 â€” low variability, showing most movies cluster around the mean.

Minâ€“Max: 0 to 10 â€” covers the full rating spectrum.

Observation: Vote average is fairly normally distributed, centered around 6â€“7, indicating consistent user ratings.

ðŸ“Œ Conclusion

Popularity and Vote Count are highly skewed, indicating a few movies dominate attention.

Vote Average is more evenly distributed, suggesting viewers rate movies consistently, regardless of their popularity.

Ideal for plotting histograms and box plots to visualize outliers and skewness.
"""

# Data Cleaning

"""Casting Release_Date column and extracing year values"""

df.head()

# casting column a
df['Release_Date'] = pd.to_datetime(df['Release_Date'])
# confirming changes
print(df['Release_Date'].dtypes)

df.info()

df.head()

"""**Dropping Overview, Original_Languege
and Poster-Url**
"""

# making list of column to be dropped
cols = ['Overview', 'Original_Language', 'Poster_Url']
# dropping columns and confirming changes
df.drop(cols, axis = 1, inplace = True)
df.columns

df.head()

"""***categorizing Vote_Average column***
We would cut the Vote_Average values and make 4 categories: popular average
below_avg not_popular to describe it more using catigorize_col() function
provided above.

"""

def catigorize_col (df, col, labels):
  edges = [df[col].describe()['min'],
  df[col].describe()['25%'],
  df[col].describe()['50%'],
  df[col].describe()['75%'],
  df[col].describe()['max']]

  df[col] = pd.cut(df[col], edges, labels = labels, duplicates='drop')
  return df

# define labels for edges
labels = ['not_popular', 'below_avg', 'average', 'popular']
# categorize column based on labels and edges
catigorize_col(df, 'Vote_Average', labels)
# confirming changes
df['Vote_Average'].unique()

df.head()

# exploring column
df['Vote_Average'].value_counts()

# dropping NaNs
df.dropna(inplace = True)
# confirming
df.isna().sum()

df.head()

"""***we'd split genres into a list and then
explode our dataframe to have only one
genre per row for ezch movie***
"""

# split the strings into lists
df['Genre'] = df['Genre'].str.split(', ')
# explode the lists
df = df.explode('Genre').reset_index(drop=True)
df.head()

# casting column into category
df['Genre'] = df['Genre'].astype('category')
# confirming changes
df['Genre'].dtypes

df.info()

df.nunique()

"""Now that our dataset is clean and tidy, we are left with a total of 6 columns and 25551
rows to dig into during our analysis

****Data Visualization****

here, we'd use Matplotlib and seaborn for making some informative visuals to gain
insights abut our data
"""

# setting up seaborn configurations
sns.set_style('whitegrid')

"""***Q1: What is the most frequent genre in
the dataset?***
"""

# showing stats. on genre column
df['Genre'].describe()

# visualizing genre column
sns.catplot(y = 'Genre', data = df, kind = 'count',
order = df['Genre'].value_counts().index,
color = '#4287f5')
plt.title('genre column distribution')
plt.show()

"""*   we can notice from the above visual that Drama genre is the most frequent genre
in our dataset and has appeared more than 14% of the times among 19 other
genres.

***Q2: What genres has highest votes?***
"""

# visualizing vote_average column
sns.catplot(y = 'Vote_Average', data = df, kind = 'count',
order = df['Vote_Average'].value_counts().index,
color = '#4287f5')
plt.title('votes destribution')
plt.show()

"""***Q3: What movie got the highest popularity? what's its
genre?***
"""

# checking max popularity in dataset
df[df['Popularity'] == df['Popularity'].max()]

"""***Q4: What movie got the lowest popularity? what's
its genre?***
"""

df[df['Popularity']==df['Popularity'].min()]

"""***Q5: Which year has the most filmmed movies?***"""

df['Release_Date'].hist()
plt.title('Release_Date column distribution')
plt.show()

"""***Conclusion***

**Q1: What is the most frequent genre in the dataset?**




Drama genre is the most frequent genre in our dataset and has appeared more than 14% of the times among 19 other genres.



**Q2: What genres has highest votes ?**




we have 25.5% of our dataset with popular vote (6520 rows). Drama again gets the
highest popularity among fans by being having more than 18.5% of movies popularities.




**Q3: What movie got the highest popularity ? what's its genre ?**




Spider-Man: No Way Home has the highest popularity rate in our dataset and it has
genres of Action , Adventure and Sience Fiction .




**Q3: What movie got the lowest popularity ? what's its genre ?**




The united states, thread' has the highest lowest rate in our dataset
and it has genres of music , drama , 'war', 'sci-fi' and history`.




**Q4: Which year has the most filmmed movies?**




year 2020 has the highest filmming rate in our dataset.

This is the movies analysis project.















.
.
.
.
.
.
.
.
.
.
"""